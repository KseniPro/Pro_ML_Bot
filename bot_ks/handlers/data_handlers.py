import logging
import pandas as pd
import numpy as np
import html

from aiogram import F, types, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, KeyboardButton, CallbackQuery
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from io import BytesIO
from aiogram.fsm.context import FSMContext
from handlers.states import DataStates, MLStates
from aiogram.types import BufferedInputFile
import logging
from sklearn.model_selection import train_test_split
from sklearn.metrics import (mean_squared_error, accuracy_score, 
                           classification_report, silhouette_score)
from io import BytesIO
from parse_params import *
from matplotlib import pyplot as plt
import seaborn as sns
import os
from aiogram.types import ReplyKeyboardMarkup

user_data = {}

MODEL_PARAMS = {
    'Linear Regression': 'fit_intercept=True',
    'Logistic Regression': 'C=1.0, max_iter=100',
    'Random Forest': 'n_estimators=100, max_depth=None',
    'XGBoost': 'n_estimators=100, max_depth=3, learning_rate=0.1',
    'LightGBM': 'n_estimators=100, max_depth=-1, learning_rate=0.1',
    'SVM': 'C=1.0, kernel=rbf',
    'K-Means': 'n_clusters=3, max_iter=300'
}

def create_main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ N —Å—Ç—Ä–æ–∫'))
    builder.add(KeyboardButton(text='–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö'))
    builder.add(KeyboardButton(text='–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö'))
    builder.add(KeyboardButton(text='–í—ã–±—Ä–∞—Ç—å ML –º–æ–¥–µ–ª—å'))
    builder.adjust(2, 2)
    return builder.as_markup(resize_keyboard=True)


async def create_ml_task_keyboard():
    print('create_ml_task_keyboard')
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text='–†–µ–≥—Ä–µ—Å—Å–∏—è'))
    builder.add(KeyboardButton(text='–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è'))
    builder.add(KeyboardButton(text='–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è'))
    builder.add(KeyboardButton(text='–ù–∞–∑–∞–¥'))
    builder.adjust(2, 2)
    return builder.as_markup(resize_keyboard=True)

async def create_model_keyboard(task_type: str):
    print('create_model_keyboard')
    builder = ReplyKeyboardBuilder()
    
    if task_type == '–†–µ–≥—Ä–µ—Å—Å–∏—è':
        models = ['Linear Regression', 'Random Forest', 'XGBoost', '–ù–∞–∑–∞–¥']
    elif task_type == '–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è':
        models = ['Logistic Regression', 'Random Forest', 'SVM', '–ù–∞–∑–∞–¥']
    elif task_type == '–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è':
        models = ['K-Means', '–ù–∞–∑–∞–¥']
    
    for model in models:
        builder.add(KeyboardButton(text=model))
    
    builder.adjust(2, 2)
    return builder.as_markup(resize_keyboard=True)

async def create_results_excel(user_id: int):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Excel —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
    data = user_data[user_id]
    output = BytesIO()
    
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        # –õ–∏—Å—Ç —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏
        data['predictions'].to_excel(writer, sheet_name='Predictions', index=False)
        
        # –õ–∏—Å—Ç —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
        metrics_df = pd.DataFrame(data['metrics'].items(), columns=['Metric', 'Value'])
        metrics_df.to_excel(writer, sheet_name='Metrics', index=False)
    
    output.seek(0)
    return output

async def register_data_handlers(dp: Dispatcher):
    @dp.message(Command('start'))
    async def cmd_start(message: Message):
        try: 
            user_name = message.from_user.first_name
            await message.answer(
                f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å, <b>{user_name}</b>! üëã\n\n'
                '–≠—Ç–æ Telegram-–±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ ML-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤.\n'
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV –∏–ª–∏ Excel.',
                parse_mode="HTML")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: {e}")
            await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


    @dp.message(F.document)
    async def handle_document(message: Message):
        try:
            file_id = message.document.file_id
            file = await message.bot.get_file(file_id)
            file_path = file.file_path
            
            if not (file_path.endswith('.csv') or file_path.endswith('.xlsx')):
                await message.answer('üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV –∏–ª–∏ Excel.')
                return
            
            file_bytes = BytesIO()
            await message.bot.download_file(file_path, file_bytes)
            file_bytes.seek(0)
            
            df = pd.read_csv(file_bytes) if file_path.endswith('.csv') else pd.read_excel(file_bytes)
            user_data[message.from_user.id] = {'df': df}
            
            await message.answer(
                '‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                reply_markup=create_main_keyboard())
                # reply_markup=builder.as_markup(resize_keyboard=True))
                
        except Exception as e:
            logging.error(f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}')
            await message.answer('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.')

    
    @dp.message(F.text == '–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö')
    async def show_data_analysis(message: Message):
        if message.from_user.id not in user_data:
            await message.answer('‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª.')
            return
        df = user_data[message.from_user.id]['df']
        info = ('üìä <b>–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö:</b>\n\n'
            f'‚Ä¢ –°—Ç—Ä–æ–∫: {df.shape[0]}\n'
            f'‚Ä¢ –°—Ç–æ–ª–±—Ü–æ–≤: {df.shape[1]}\n\n'
            '<b>–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:</b>\n'
            f'<pre>{df.isna().sum().to_string()}</pre>\n\n'
            '<b>–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:</b>\n'
            f'<pre>{df.dtypes.to_string()}</pre>')
        await message.answer(info, parse_mode='HTML')
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: —Ç–æ–ª—å–∫–æ –ø–æ —á–∏—Å–ª–æ–≤—ã–º —Å—Ç–æ–ª–±—Ü–∞–º
        import matplotlib.pyplot as plt
        import seaborn as sns
        import os
        user_id = message.from_user.id
        try:
            num_df = df.select_dtypes(include=['number'])
            if num_df.shape[1] == 0:
                await message.answer('–ù–µ—Ç —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.')
                return
            plt.figure(figsize=(8, 6))
            sns.heatmap(num_df.corr(), annot=True, cmap='coolwarm')
            plt.title('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞')
            corr_path = f'logs/corr_{user_id}.png'
            plt.tight_layout()
            plt.savefig(corr_path)
            plt.close()
            with open(corr_path, 'rb') as img_file:
                photo = BufferedInputFile(img_file.read(), filename=os.path.basename(corr_path))
                await message.answer_photo(photo, caption='–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞')
            os.remove(corr_path)
            # Pairplot (–µ—Å–ª–∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤)
            if num_df.shape[1] <= 8 and num_df.shape[1] > 1:
                pairplot_path = f'logs/pairplot_{user_id}.png'
                sns.pairplot(num_df)
                plt.savefig(pairplot_path)
                plt.close()
                with open(pairplot_path, 'rb') as img_file:
                    photo = BufferedInputFile(img_file.read(), filename=os.path.basename(pairplot_path))
                    await message.answer_photo(photo, caption='Pairplot')
                os.remove(pairplot_path)
        except Exception as e:
            await message.answer(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}')

    @dp.message(F.text == '–ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ N —Å—Ç—Ä–æ–∫')
    async def ask_for_rows_number(message: Message, state: FSMContext):
        if message.from_user.id not in user_data:
            await message.answer('‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª.')
            return
        
        await message.answer('üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–æ—Ç 1 –¥–æ 50):',
            reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(DataStates.waiting_for_rows)

    @dp.message(DataStates.waiting_for_rows)
    async def show_custom_rows(message: Message, state: FSMContext):
        try:
            n = int(message.text)
            if n < 1 or n > 50:
                raise ValueError
            
            df = user_data[message.from_user.id]['df']
            table = []
            headers = [f"<b>{col}</b>" for col in df.columns]
            table.append("|".join(headers))
            
            for _, row in df.head(n).iterrows():
                table.append("|".join(str(x) for x in row.values))
            
            response = (f"<b>–ü–µ—Ä–≤—ã–µ {n} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö:</b>\n"
                f"<code>\n" + "\n".join(table) + "\n</code>")
            
            await message.answer(response, parse_mode='HTML')
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                reply_markup=create_main_keyboard())
            await state.clear()
                
        except ValueError:
            await message.answer('‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 50.')
            

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    # @dp.message(F.text)
    # async def handle_other_text(message: Message):
    #     if message.from_user.id in user_data:
    #         builder = ReplyKeyboardBuilder()
    #         builder.add(KeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ N —Å—Ç—Ä–æ–∫'))
    #         builder.add(KeyboardButton(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö'))
            
    #         await message.answer('‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏.',
    #             reply_markup=builder.as_markup(resize_keyboard=True))
    #     else:
    #         await message.answer('üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV –∏–ª–∏ Excel.')
            
            

    @dp.message(F.text == '–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö')
    async def preprocess_menu(message: Message, state: FSMContext):
        if message.from_user.id not in user_data:
            await message.answer('‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª.')
            return

        builder = ReplyKeyboardBuilder()
        builder.add(KeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã'))
        builder.add(KeyboardButton(text='–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤'))
        builder.add(KeyboardButton(text='–ù–∞–∑–∞–¥'))
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏.',
            reply_markup=builder.as_markup(resize_keyboard=True))
        await state.set_state(DataStates.waiting_preprocess_action)

    # === –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ ===
    @dp.message(F.text == '–£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã', DataStates.waiting_preprocess_action)
    async def duplicates_menu(message: Message, state: FSMContext):
        builder = InlineKeyboardBuilder()
        builder.button(text="–ü–æ –≤—Å–µ–π —Å—Ç—Ä–æ–∫–µ", callback_data="dup_full")
        builder.button(text="–í—ã–±—Ä–∞—Ç—å —Å—Ç–æ–ª–±—Ü—ã", callback_data="dup_select")
        await message.answer("–ö–∞–∫ —É–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã?",
            reply_markup=builder.as_markup())
        await state.set_state(DataStates.waiting_dup_action)

    @dp.callback_query(F.data.startswith('dup_'), DataStates.waiting_dup_action)
    async def process_duplicates(callback: CallbackQuery, state: FSMContext):
        action = callback.data.split('_')[1]
        df = user_data[callback.from_user.id]['df'].copy()
        
        if action == "full":
            initial_count = len(df)
            df = df.drop_duplicates()
            removed = initial_count - len(df)
            
            await callback.message.answer(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {removed} –ø–æ–ª–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤.\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å —Å—Ç—Ä–æ–∫: {len(df)}.")
        elif action == "select":
            columns = df.columns.tolist()
            builder = InlineKeyboardBuilder()
            
            for col in columns:
                builder.button(text=f"‚úì {col}" if col in (await state.get_data()).get('selected_columns', []) else col,
                    callback_data=f"col_{col}")
            
            builder.button(text="‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å", callback_data="dup_confirm")
            builder.adjust(2, repeat=True)
            
            await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:",
                reply_markup=builder.as_markup())
            await state.update_data(selected_columns=[])
            await state.set_state(DataStates.waiting_columns_selection)
            return
        
        user_data[callback.from_user.id]['df'] = df
        await state.clear()
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                reply_markup=create_main_keyboard())
        await callback.answer()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
    @dp.callback_query(F.data.startswith('col_'), DataStates.waiting_columns_selection)
    async def select_columns(callback: CallbackQuery, state: FSMContext):
        column = callback.data.split('_')[1]
        data = await state.get_data()
        selected = data.get('selected_columns', [])
        
        if column in selected:
            selected.remove(column)
        else:
            selected.append(column)
        
        await state.update_data(selected_columns=selected)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        df = user_data[callback.from_user.id]['df']
        builder = InlineKeyboardBuilder()
        
        for col in df.columns:
            prefix = "‚úì " if col in selected else ""
            builder.button(text=f"{prefix}{col}", callback_data=f"col_{col}")
        
        builder.button(text="‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å", callback_data="dup_confirm")
        builder.adjust(2, repeat=True)
        
        await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
        await callback.answer()

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
    @dp.callback_query(F.data == 'dup_confirm', DataStates.waiting_columns_selection)
    async def apply_duplicates_removal(callback: CallbackQuery, state: FSMContext):
        data = await state.get_data()
        selected = data.get('selected_columns', [])
        
        if not selected:
            await callback.answer("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞.", show_alert=True)
            return
        
        df = user_data[callback.from_user.id]['df'].copy()
        initial_count = len(df)
        df = df.drop_duplicates(subset=selected)
        removed = initial_count - len(df)
        
        user_data[callback.from_user.id]['df'] = df
        await callback.message.answer(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {removed} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º: {', '.join(selected)}.\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å —Å—Ç—Ä–æ–∫: {len(df)}")
        await state.clear()
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                reply_markup=create_main_keyboard())
        await callback.answer()

    # === –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤ ===
    @dp.message(F.text == '–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤', DataStates.waiting_preprocess_action)
    async def handle_missing_data(message: Message, state: FSMContext):
        builder = InlineKeyboardBuilder()
        builder.button(text="–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏", callback_data="missing_drop")
        builder.button(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏", callback_data="missing_fill")
        await message.answer("–ö–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è?",
            reply_markup=builder.as_markup())
        await state.set_state(DataStates.waiting_missing_action)

    @dp.callback_query(F.data.startswith('missing_'), DataStates.waiting_missing_action)
    async def process_missing_action(callback: CallbackQuery, state: FSMContext):
        action = callback.data.split('_')[1]
        df = user_data[callback.from_user.id]['df'].copy()
        
        if action == "drop":
            initial_count = len(df)
            df = df.dropna()
            removed = initial_count - len(df)
            
            await callback.message.answer(
                f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {removed} —Å—Ç—Ä–æ–∫ —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏.\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å —Å—Ç—Ä–æ–∫: {len(df)}.")
        elif action == "fill":
            builder = InlineKeyboardBuilder()
            builder.button(text="–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", callback_data="fill_mean")
            builder.button(text="–ú–µ–¥–∏–∞–Ω–∞", callback_data="fill_median")
            builder.button(text="–ú–æ–¥–∞", callback_data="fill_mode")
            builder.button(text="–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞", callback_data="fill_const")
            
            await callback.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–æ–≤:",
                reply_markup=builder.as_markup())
            await state.set_state(DataStates.waiting_fill_method)
            return
        
        user_data[callback.from_user.id]['df'] = df
        await state.clear()
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                reply_markup=create_main_keyboard())
        await callback.answer()

    @dp.callback_query(F.data.startswith('fill_'), DataStates.waiting_fill_method)
    async def process_fill_method(callback: CallbackQuery, state: FSMContext):
        method = callback.data.split('_')[1]
        user_id = callback.from_user.id
        df = user_data[user_id]['df']
        
        numeric_cols = df.select_dtypes(include=['number']).columns
        
        if method == "const":
            await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–æ–≤:")
            await state.update_data(fill_method=method)
            return
        
        numeric_data = df[numeric_cols].copy()
        
        if method == "mean":
            fill_values = numeric_data.mean()
        elif method == "median":
            fill_values = numeric_data.median()
        elif method == "mode":
            fill_values = numeric_data.mode().iloc[0]
        
        df[numeric_cols] = numeric_data.fillna(fill_values)
        user_data[user_id]['df'] = df
        await callback.message.answer(f"‚úÖ –ü—Ä–æ–ø—É—Å–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã ({method}.)")
        await state.clear()
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                reply_markup=create_main_keyboard())
        await callback.answer()


    @dp.message(DataStates.waiting_fill_method)
    async def process_fill_const(message: Message, state: FSMContext):
        try:
            value = float(message.text)
            user_id = message.from_user.id
            df = user_data[user_id]['df']
            numeric_cols = df.select_dtypes(include=['number']).columns
            df[numeric_cols] = df[numeric_cols].fillna(value)
            
            await message.answer(f"‚úÖ –ü—Ä–æ–ø—É—Å–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏–µ–º {value}.")
            await state.clear()
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                reply_markup=create_main_keyboard())
            
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")


    @dp.message(F.text == '–ù–∞–∑–∞–¥', DataStates.waiting_preprocess_action)
    async def back_from_preprocess(message: Message, state: FSMContext):
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            reply_markup=create_main_keyboard())
        await state.clear()




# new
    @dp.message(F.text == '–í—ã–±—Ä–∞—Ç—å ML –º–æ–¥–µ–ª—å')
    async def select_ml_task(message: Message, state: FSMContext):
        if message.from_user.id not in user_data:
            await message.answer('‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª.')
            return
            
        await message.answer(
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è:',
            reply_markup=await create_ml_task_keyboard())
        await state.set_state(MLStates.selecting_ml_task)

    @dp.message(MLStates.selecting_ml_task, F.text.in_(['–†–µ–≥—Ä–µ—Å—Å–∏—è', '–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è', '–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è']))
    async def select_model_type(message: Message, state: FSMContext):
        task_type = message.text
        user_id = message.from_user.id
        
        if user_id not in user_data:
            user_data[user_id] = {}
        user_data[user_id]['ml_task'] = task_type
        
        await message.answer(
            f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {task_type}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:',
            reply_markup=await create_model_keyboard(task_type))
        await state.set_state(MLStates.selecting_model)


    @dp.message(MLStates.selecting_model, F.text.in_(MODEL_PARAMS.keys()))
    async def configure_model(message: Message, state: FSMContext):
        user_id = message.from_user.id
        model_name = message.text
        user_data[user_id]['ml_model'] = model_name
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É '–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é'
        builder = ReplyKeyboardBuilder()
        builder.add(KeyboardButton(text='–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é'))
        await message.answer(
            f'–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è {model_name} (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):\n'
            f'–ü—Ä–∏–º–µ—Ä: {MODEL_PARAMS[model_name]}\n'
            '–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é" –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ',
            reply_markup=builder.as_markup(resize_keyboard=True)
        )
        await state.set_state(MLStates.configuring_model)

    @dp.message(MLStates.configuring_model, F.text.casefold() == '–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é')
    async def use_default_params(message: Message, state: FSMContext):
        user_id = message.from_user.id
        model_name = user_data[user_id]['ml_model']
        user_data[user_id]['model_params'] = MODEL_PARAMS[model_name]
        
        # –ù–æ–≤—ã–π —ç—Ç–∞–ø: –≤—ã–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        df = user_data[user_id]['df']
        columns = df.columns
        dtypes = df.dtypes
        col_list = [f"{i+1}. {col}: {dtypes[col]}" for i, col in enumerate(columns)]
        await message.answer(
            '–ú–æ–¥–µ–ª—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:\n'
            f'{MODEL_PARAMS[model_name]}\n'
            '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):\n'
            + '\n'.join(col_list)
        )
        await state.set_state(MLStates.selecting_features)

    @dp.message(MLStates.configuring_model)
    async def process_custom_params(message: Message, state: FSMContext):
        user_id = message.from_user.id
        model_name = user_data[user_id]['ml_model']
        
        if message.text.lower() in ['–Ω–∞–∑–∞–¥', 'back']:
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:',
                reply_markup=await create_model_keyboard(user_data[user_id]['ml_task']))
            await state.set_state(MLStates.selecting_model)
            return
            
        try:
            params = {}
            for param in message.text.split(','):
                key, value = param.strip().split('=')
                params[key.strip()] = value.strip()
            
            user_data[user_id]['model_params'] = params
            
            # –ù–æ–≤—ã–π —ç—Ç–∞–ø: –≤—ã–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            df = user_data[user_id]['df']
            columns = df.columns
            dtypes = df.dtypes
            col_list = [f"{i+1}. {col}: {dtypes[col]}" for i, col in enumerate(columns)]
            await message.answer(
                f'–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è {model_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:\n'
                f'{params}\n'
                '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):\n'
                + '\n'.join(col_list)
            )
            await state.set_state(MLStates.selecting_features)
            
        except Exception as e:
            await message.answer(
                f'‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}\n'
                f'–ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞: n_estimators=100, max_depth=5\n'
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"'
            )

    # –ù–æ–≤—ã–π —ç—Ç–∞–ø: –≤—ã–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    @dp.message(MLStates.selecting_features)
    async def select_features(message: Message, state: FSMContext):
        user_id = message.from_user.id
        df = user_data[user_id]['df']
        columns = df.columns
        task_type = user_data[user_id].get('ml_task', '').lower()
        
        try:
            feature_idxs = [int(idx.strip())-1 for idx in message.text.split(',') if idx.strip().isdigit()]
            if not feature_idxs or any(idx < 0 or idx >= len(columns) for idx in feature_idxs):
                raise ValueError
            user_data[user_id]['feature_idxs'] = feature_idxs
            
            # –î–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω—É–∂–µ–Ω target
            if '–∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è' in task_type:
                # –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ —Å—Ä–∞–∑—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É
                builder = ReplyKeyboardBuilder()
                builder.add(KeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã'))
                builder.add(KeyboardButton(text='–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤'))
                builder.add(KeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ'))
                builder.add(KeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'))
                builder.adjust(2, 2)
                await message.answer(
                    '–î–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ target –Ω–µ –Ω—É–∂–µ–Ω. –ü–µ—Ä–µ–¥ –æ–±—É—á–µ–Ω–∏–µ–º –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö.\n'
                    '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                    reply_markup=builder.as_markup(resize_keyboard=True)
                )
                await state.set_state(MLStates.preprocessing_before_train)
            else:
                # –î–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å target
                dtypes = df.dtypes
                col_list = [f"{i+1}. {col}: {dtypes[col]}" for i, col in enumerate(columns)]
                await message.answer(
                    '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–∞—Ä–≥–µ—Ç–∞ (—Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π):\n'
                    + '\n'.join(col_list)
                )
                await state.set_state(MLStates.selecting_target)
        except Exception:
            await message.answer('‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1,2,3')

    # –ù–æ–≤—ã–π —ç—Ç–∞–ø: –≤—ã–±–æ—Ä —Ç–∞—Ä–≥–µ—Ç–∞
    @dp.message(MLStates.selecting_target)
    async def select_target(message: Message, state: FSMContext):
        user_id = message.from_user.id
        df = user_data[user_id]['df']
        columns = df.columns
        try:
            target_idx = int(message.text.strip())-1
            if target_idx < 0 or target_idx >= len(columns):
                raise ValueError
            user_data[user_id]['target_idx'] = target_idx
            # –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–≥–µ—Ç–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É
            builder = ReplyKeyboardBuilder()
            builder.add(KeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã'))
            builder.add(KeyboardButton(text='–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤'))
            builder.add(KeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ'))
            builder.add(KeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'))
            builder.adjust(2, 2)
            await message.answer(
                '–ü–µ—Ä–µ–¥ –æ–±—É—á–µ–Ω–∏–µ–º –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö.\n'
                '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                reply_markup=builder.as_markup(resize_keyboard=True)
            )
            await state.set_state(MLStates.preprocessing_before_train)
        except Exception:
            await message.answer('‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è —Ç–∞—Ä–≥–µ—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: 4')

    # –ú–µ–Ω—é –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–¥ –æ–±—É—á–µ–Ω–∏–µ–º
    @dp.message(MLStates.preprocessing_before_train)
    async def preprocessing_before_train(message: Message, state: FSMContext):
        user_id = message.from_user.id
        text = message.text.strip().lower()
        df = user_data[user_id]['df']
        if text == '—É–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã':
            builder = InlineKeyboardBuilder()
            builder.button(text="–ü–æ –≤—Å–µ–π —Å—Ç—Ä–æ–∫–µ", callback_data="dup_full_train")
            builder.button(text="–í—ã–±—Ä–∞—Ç—å —Å—Ç–æ–ª–±—Ü—ã", callback_data="dup_select_train")
            await message.answer("–ö–∞–∫ —É–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã?",
                reply_markup=builder.as_markup())
            await state.set_state(DataStates.waiting_dup_action)
        elif text == '–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤':
            builder = InlineKeyboardBuilder()
            builder.button(text="–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏", callback_data="missing_drop_train")
            builder.button(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Å—Ä–µ–¥–Ω–∏–º", callback_data="fill_mean_train")
            builder.button(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –º–µ–¥–∏–∞–Ω–æ–π", callback_data="fill_median_train")
            builder.button(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –º–æ–¥–æ–π", callback_data="fill_mode_train")
            builder.button(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∫–æ–Ω—Å—Ç–∞–Ω—Ç–æ–π", callback_data="fill_const_train")
            await message.answer("–ö–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏?",
                reply_markup=builder.as_markup())
            await state.set_state(DataStates.waiting_missing_action)
        elif text == '–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ':
            await message.answer('–ù–∞—á–∏–Ω–∞—é –æ–±—É—á–µ–Ω–∏–µ...')
            await state.set_state(MLStates.training_model)
            await handle_model_training(message, state)
        elif text == '–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=create_main_keyboard())
            await state.clear()
        else:
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.')

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–µ—Ä–µ–¥ –æ–±—É—á–µ–Ω–∏–µ–º
    @dp.callback_query(F.data.in_(["dup_full_train", "dup_select_train"]), DataStates.waiting_dup_action)
    async def process_duplicates_train(callback: CallbackQuery, state: FSMContext):
        user_id = callback.from_user.id
        df = user_data[user_id]['df'].copy()
        action = callback.data
        if action == "dup_full_train":
            initial_count = len(df)
            df = df.drop_duplicates()
            removed = initial_count - len(df)
            user_data[user_id]['df'] = df
            await callback.message.answer(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {removed} –ø–æ–ª–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤. –û—Å—Ç–∞–ª–æ—Å—å —Å—Ç—Ä–æ–∫: {len(df)}.")
            await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                reply_markup=ReplyKeyboardBuilder()
                    .add(KeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã'))
                    .add(KeyboardButton(text='–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤'))
                    .add(KeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ'))
                    .add(KeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'))
                    .adjust(2, 2)
                    .as_markup(resize_keyboard=True))
            await state.set_state(MLStates.preprocessing_before_train)
            await callback.answer()
        elif action == "dup_select_train":
            columns = df.columns.tolist()
            builder = InlineKeyboardBuilder()
            for col in columns:
                builder.button(text=col, callback_data=f"col_train_{col}")
            builder.button(text="‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å", callback_data="dup_confirm_train")
            builder.adjust(2, repeat=True)
            await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:",
                reply_markup=builder.as_markup())
            await state.update_data(selected_columns=[])
            await state.set_state(DataStates.waiting_columns_selection)
            await callback.answer()

    # –í—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–µ—Ä–µ–¥ –æ–±—É—á–µ–Ω–∏–µ–º
    @dp.callback_query(F.data.startswith('col_train_'), DataStates.waiting_columns_selection)
    async def select_columns_train(callback: CallbackQuery, state: FSMContext):
        column = callback.data[len('col_train_'):]
        data = await state.get_data()
        selected = data.get('selected_columns', [])
        if column in selected:
            selected.remove(column)
        else:
            selected.append(column)
        await state.update_data(selected_columns=selected)
        df = user_data[callback.from_user.id]['df']
        builder = InlineKeyboardBuilder()
        for col in df.columns:
            prefix = "‚úì " if col in selected else ""
            builder.button(text=f"{prefix}{col}", callback_data=f"col_train_{col}")
        builder.button(text="‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å", callback_data="dup_confirm_train")
        builder.adjust(2, repeat=True)
        await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
        await callback.answer()

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å—Ç–æ–ª–±—Ü–∞–º –ø–µ—Ä–µ–¥ –æ–±—É—á–µ–Ω–∏–µ–º
    @dp.callback_query(F.data == 'dup_confirm_train', DataStates.waiting_columns_selection)
    async def apply_duplicates_removal_train(callback: CallbackQuery, state: FSMContext):
        data = await state.get_data()
        selected = data.get('selected_columns', [])
        if not selected:
            await callback.answer("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞.", show_alert=True)
            return
        df = user_data[callback.from_user.id]['df'].copy()
        initial_count = len(df)
        df = df.drop_duplicates(subset=selected)
        removed = initial_count - len(df)
        user_data[callback.from_user.id]['df'] = df
        await callback.message.answer(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {removed} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º: {', '.join(selected)}. –û—Å—Ç–∞–ª–æ—Å—å —Å—Ç—Ä–æ–∫: {len(df)}")
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
            reply_markup=ReplyKeyboardBuilder()
                .add(KeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã'))
                .add(KeyboardButton(text='–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤'))
                .add(KeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ'))
                .add(KeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'))
                .adjust(2, 2)
                .as_markup(resize_keyboard=True))
        await state.set_state(MLStates.preprocessing_before_train)
        await callback.answer()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –ø–µ—Ä–µ–¥ –æ–±—É—á–µ–Ω–∏–µ–º
    @dp.callback_query(F.data.in_(["missing_drop_train", "fill_mean_train", "fill_median_train", "fill_mode_train", "fill_const_train"]), DataStates.waiting_missing_action)
    async def process_missing_action_train(callback: CallbackQuery, state: FSMContext):
        user_id = callback.from_user.id
        df = user_data[user_id]['df']
        action = callback.data
        numeric_cols = df.select_dtypes(include=['number']).columns
        if action == "missing_drop_train":
            initial_count = len(df)
            df = df.dropna()
            removed = initial_count - len(df)
            user_data[user_id]['df'] = df
            await callback.message.answer(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {removed} —Å—Ç—Ä–æ–∫ —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏. –û—Å—Ç–∞–ª–æ—Å—å —Å—Ç—Ä–æ–∫: {len(df)}.")
        elif action == "fill_mean_train":
            fill_values = df[numeric_cols].mean()
            df[numeric_cols] = df[numeric_cols].fillna(fill_values)
            user_data[user_id]['df'] = df
            await callback.message.answer(f"‚úÖ –ü—Ä–æ–ø—É—Å–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã —Å—Ä–µ–¥–Ω–∏–º.")
        elif action == "fill_median_train":
            fill_values = df[numeric_cols].median()
            df[numeric_cols] = df[numeric_cols].fillna(fill_values)
            user_data[user_id]['df'] = df
            await callback.message.answer(f"‚úÖ –ü—Ä–æ–ø—É—Å–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –º–µ–¥–∏–∞–Ω–æ–π.")
        elif action == "fill_mode_train":
            fill_values = df[numeric_cols].mode().iloc[0]
            df[numeric_cols] = df[numeric_cols].fillna(fill_values)
            user_data[user_id]['df'] = df
            await callback.message.answer(f"‚úÖ –ü—Ä–æ–ø—É—Å–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –º–æ–¥–æ–π.")
        elif action == "fill_const_train":
            await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–æ–≤:")
            await state.update_data(fill_method='const_train')
            return
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
            reply_markup=ReplyKeyboardBuilder()
                .add(KeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã'))
                .add(KeyboardButton(text='–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤'))
                .add(KeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ'))
                .add(KeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'))
                .adjust(2, 2)
                .as_markup(resize_keyboard=True))
        await state.set_state(MLStates.preprocessing_before_train)
        await callback.answer()

    # –í–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–æ–≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–æ–π –ø–µ—Ä–µ–¥ –æ–±—É—á–µ–Ω–∏–µ–º
    @dp.message(DataStates.waiting_fill_method)
    async def process_fill_const_train(message: Message, state: FSMContext):
        data = await state.get_data()
        if data.get('fill_method') == 'const_train':
            try:
                value = float(message.text)
                user_id = message.from_user.id
                df = user_data[user_id]['df']
                numeric_cols = df.select_dtypes(include=['number']).columns
                df[numeric_cols] = df[numeric_cols].fillna(value)
                user_data[user_id]['df'] = df
                await message.answer(f"‚úÖ –ü—Ä–æ–ø—É—Å–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏–µ–º {value}.")
                await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                    reply_markup=ReplyKeyboardBuilder()
                        .add(KeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã'))
                        .add(KeyboardButton(text='–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤'))
                        .add(KeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ'))
                        .add(KeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'))
                        .adjust(2, 2)
                        .as_markup(resize_keyboard=True))
                await state.set_state(MLStates.preprocessing_before_train)
            except ValueError:
                await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        else:
            # —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–µ–≤
            pass

    @dp.message(MLStates.training_model)
    async def handle_model_training(message: Message, state: FSMContext):
        if message.text and message.text.strip().lower() == '–≤ –º–µ–Ω—é':
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=create_main_keyboard())
            await state.clear()
            return
        user_id = message.from_user.id
        try:
            data = user_data[user_id]
            df = data['df'].copy()
            model_name = data['ml_model']
            params = parse_params(data['model_params']) if isinstance(data['model_params'], str) else data['model_params']
            task_type = data['ml_task'].lower()
            feature_idxs = data.get('feature_idxs')
            target_idx = data.get('target_idx')
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
            if '–∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è' in task_type:
                # –î–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏–∑–Ω–∞–∫–∏, –±–µ–∑ target
                if feature_idxs is not None:
                    if not isinstance(feature_idxs, list):
                        feature_idxs = [feature_idxs]
                    X = df.iloc[:, feature_idxs]
                else:
                    # –ï—Å–ª–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
                    X = df.iloc[:, :-1]
                
                if isinstance(X, pd.Series):
                    X = X.to_frame()
                
                # –î–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –¥–µ–ª–∞–µ–º train_test_split
                model = create_model_instance(model_name, params, task_type)
                model.fit(X)
                y_pred = model.predict(X)
                
                metrics = calculate_metrics(
                    y_true=None,  # –î–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω—É–∂–µ–Ω y_true
                    y_pred=y_pred,
                    task_type=task_type,
                    X=X
                )
                
                # –°–æ–∑–¥–∞–µ–º DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
                results_df = pd.DataFrame({
                    'Cluster': y_pred
                })
                if hasattr(X, 'columns') and len(X.columns) <= 5:
                    for i, col in enumerate(X.columns):
                        results_df[f'Feature_{i+1}'] = X[col].values
                
            else:
                # –î–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏ –ø—Ä–∏–∑–Ω–∞–∫–∏, –∏ target
                if feature_idxs is not None and target_idx is not None:
                    if not isinstance(feature_idxs, list):
                        feature_idxs = [feature_idxs]
                    all_idxs = feature_idxs + [target_idx]
                    temp_df = df.iloc[:, all_idxs]
                    X = temp_df.iloc[:, :-1]
                    y = temp_df.iloc[:, -1]
                else:
                    X = df.iloc[:, :-1]
                    y = df.iloc[:, -1]
                
                if isinstance(X, pd.Series):
                    X = X.to_frame()
                
                X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
                if isinstance(X_train, pd.Series):
                    X_train = X_train.to_frame()
                if isinstance(X_test, pd.Series):
                    X_test = X_test.to_frame()
                
                model = create_model_instance(model_name, params, task_type)
                model.fit(X_train, y_train)
                y_pred = model.predict(X_test)
                
                metrics = calculate_metrics(
                    y_true=y_test,
                    y_pred=y_pred,
                    task_type=task_type
                )
                
                results_df = pd.DataFrame({
                    'Actual': y_test,
                    'Predicted': y_pred
                })
                if hasattr(X_test, 'columns') and len(X_test.columns) <= 5:
                    for i, col in enumerate(X_test.columns):
                        results_df[f'Feature_{i+1}'] = X_test[col].values
            
            user_data[user_id].update({
                'trained_model': model,
                'metrics': metrics,
                'predictions': results_df
            })
            
            metrics_text = "\n".join([f"{k}: {v:.4f}" for k, v in metrics.items()])
            await message.answer(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è:\n{metrics_text}")
            excel_file = await create_results_excel(user_id)
            await message.answer_document(
                types.BufferedInputFile(
                    excel_file.getvalue(),
                    filename="model_results.xlsx"),
                caption="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
            await state.clear()
        except Exception as e:
            err_text = html.escape(str(e))
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏:\n<code>{err_text}</code>", parse_mode='HTML')
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=create_main_keyboard())
            await state.clear()

    # –ö–Ω–æ–ø–∫–∞ '–í –º–µ–Ω—é' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ —ç—Ç–∞–ø–∞ –æ–±—É—á–µ–Ω–∏—è
    @dp.message(MLStates.training_model, F.text.casefold() == '–≤ –º–µ–Ω—é')
    async def back_to_menu_from_training(message: Message, state: FSMContext):
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=create_main_keyboard())
        await state.clear()

    @dp.message(F.text)
    async def handle_other_text(message: Message):
        if (message.from_user.id in user_data and 
            message.text not in ['–ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ N —Å—Ç—Ä–æ–∫', 
                            '–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö',
                            '–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö',
                            '–í—ã–±—Ä–∞—Ç—å ML –º–æ–¥–µ–ª—å']):

            await message.answer('‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏.',
                reply_markup=create_main_keyboard())
        elif message.from_user.id not in user_data:
            await message.answer('üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV –∏–ª–∏ Excel.')  
            
    
      
    
    
    
    
